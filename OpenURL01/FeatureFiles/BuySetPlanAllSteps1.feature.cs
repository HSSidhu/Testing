// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationPOC.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Buy A Set Plan")]
    public partial class BuyASetPlanFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BuySetPlanAllSteps.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Buy A Set Plan", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buying a SET Funeral Plan for New User")]
        public virtual void BuyingASETFuneralPlanForNewUser(
                    string browser, 
                    string device, 
                    string burialType, 
                    string planType, 
                    string newUser, 
                    string title, 
                    string firstName, 
                    string lastName, 
                    string gender, 
                    string birthDate, 
                    string birthMonth, 
                    string birthYear, 
                    string houseNumber, 
                    string postCode, 
                    string phoneNumber, 
                    string coopMemNumber, 
                    string password, 
                    string confirmPassword, 
                    string cardType, 
                    string paymenttype, 
                    string nameOnCard, 
                    string cardNumber, 
                    string expiryMonth, 
                    string expiryYear, 
                    string visaDebitSecurityCode, 
                    string accountName, 
                    string accountNUmber, 
                    string sortCode1, 
                    string sortcode2, 
                    string sortcode3, 
                    string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buying a SET Funeral Plan for New User", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given(string.Format("I am on Home Page using {0} {1}", device, browser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.When(string.Format("I Select the Prepaid Funeral Plan {0} {1}", device, browser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.And(string.Format("Set Funeral plan as {0} {1} {2}", burialType, planType, newUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And(string.Format("creates New account and provide user details {0} {1} {2} {3} {4} {5} {6} {7}", title, firstName, lastName, gender, birthDate, birthMonth, birthYear, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And(string.Format("user provides Address Details {0} {1}", houseNumber, postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And(string.Format("provides {0} {1} {2} {3}", phoneNumber, coopMemNumber, password, confirmPassword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And(string.Format("user provides all payment Details {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {1" +
                        "1}", cardType, paymenttype, nameOnCard, cardNumber, expiryMonth, expiryYear, visaDebitSecurityCode, accountName, accountNUmber, sortCode1, sortcode2, sortcode3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Buying a SET Funeral Plan for an Existing user")]
        [NUnit.Framework.TestCaseAttribute("Chrome", "Laptop", "SetBurialPlan", "Simple", "No", "h1116604684@hs.com", "password1", "Visa Debit", "OneOff", "Testing", "4917480000000008", "May", "2021", "202", "NA", "NA", "Na", "NA", "NA", new string[0])]
        public virtual void BuyingASETFuneralPlanForAnExistingUser(
                    string browser, 
                    string device, 
                    string burialType, 
                    string planType, 
                    string newUser, 
                    string email, 
                    string password, 
                    string cardType, 
                    string paymenttype, 
                    string nameOnCard, 
                    string cardNumber, 
                    string expiryMonth, 
                    string expiryYear, 
                    string visaDebitSecurityCode, 
                    string accountName, 
                    string accountNUmber, 
                    string sortCode1, 
                    string sortcode2, 
                    string sortcode3, 
                    string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Buying a SET Funeral Plan for an Existing user", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given(string.Format("I am on Home Page using {0} {1}", device, browser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.When(string.Format("I Select the Prepaid Funeral Plan {0} {1}", device, browser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.And(string.Format("Set Funeral plan as {0} {1} {2}", burialType, planType, newUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And(string.Format("user logins using their {0} {1} {2}", email, password, device), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And(string.Format("user provides all payment Details {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {1" +
                        "1}", cardType, paymenttype, nameOnCard, cardNumber, expiryMonth, expiryYear, visaDebitSecurityCode, accountName, accountNUmber, sortCode1, sortcode2, sortcode3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.Then("Order Confirmation Page is displayed along with the Plan Number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
